[project]
name = "spatium"
version = "0.1.0"
description = "Network Configuration Analyzer"
readme = "README.md"
requires-python = ">=3.10"
dependencies = [
    "fastapi>=0.100.0",
    "uvicorn>=0.23.0",
    "httpx>=0.24.1",
    "pydantic>=2.0.0",
    "python-multipart>=0.0.6",
    "asyncssh>=2.13.0", # For SSH connections
    "pygnmi>=0.8.12", # For gNMI connections
    "pydantic-settings>=2.0.0", # For settings management
    "pyyaml>=6.0", # For YAML processing (ContainerLab topology)
    "jinja2>=3.1.2", # For templating
    "mkdocs>=1.6.1",
    "mkdocs-material>=9.6.14",
    "mkdocstrings>=0.29.1",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "ruff>=0.12.0",
    "mypy>=1.7.0",
    "types-PyYAML>=6.0.12",
    "bandit>=1.7.5",
    "safety>=2.3.0",
    "pre-commit>=3.5.0",
    "mkdocs>=1.5.0",
    "mkdocs-material>=9.4.0",
    "httpx>=0.24.1",
    "twine>=4.0.0",
    "build>=1.0.0"
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = ["spatium"]

[tool.uv]

[dependency-groups]
dev = [
    "pytest>=8.4.1",
    "pytest-asyncio>=1.0.0",
    "pytest-cov>=4.1.0",
    "pytest-xdist>=3.3.1",
    "pytest-timeout>=2.1.0",
    "ruff>=0.12.0",
    "mypy>=1.7.0",
    "types-PyYAML>=6.0.12",
    "bandit>=1.7.5",
    "safety>=2.3.0"
]

# pytest configuration
[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "--strict-markers",
    "--strict-config",
    "--cov=spatium",
    "--cov-branch",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--tb=short",
    "--timeout=60"
]
testpaths = ["tests"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "asyncio: marks tests as async tests",
    "ssh: marks tests that require SSH connectivity",
    "containerlab: marks tests that require ContainerLab",
    "network: marks tests that require network access"
]
asyncio_mode = "auto"
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning"
]

# Coverage configuration
[tool.coverage.run]
source = ["spatium"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/venv/*",
    "*/.venv/*",
    "*/env/*",
    "*/.env/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod"
]
show_missing = true
skip_covered = false
precision = 2

[tool.coverage.html]
directory = "htmlcov"

[tool.coverage.xml]
output = "coverage.xml"

# MyPy configuration
[tool.mypy]
python_version = "3.10"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "asyncssh.*",
    "pygnmi.*",
    "pybatfish.*",
    "containerlab.*"
]
ignore_missing_imports = true

# Ruff configuration
[tool.ruff]
target-version = "py310"
line-length = 100
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "C90", # mccabe
    "N",   # pep8-naming
    "D",   # pydocstyle
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
    "A",   # flake8-builtins
    "C4",  # flake8-comprehensions
    "PT",  # flake8-pytest-style
    "SIM", # flake8-simplify
    "TCH", # flake8-type-checking
    "ARG", # flake8-unused-arguments
    "PTH", # flake8-use-pathlib
    "TD",  # flake8-todos
    "FIX", # flake8-fixme
]
ignore = [
    "D100", # Missing docstring in public module
    "D104", # Missing docstring in public package
    "D203", # 1 blank line required before class docstring
    "D213", # Multi-line docstring summary should start at the second line
    "TD002", # Missing author in TODO
    "TD003", # Missing issue link on the line following this TODO
    "FIX002", # Line contains TODO, consider resolving the issue
]

[tool.ruff.per-file-ignores]
"tests/*" = [
    "D", # Don't require docstrings in tests
    "ARG", # Allow unused arguments in tests
    "PT009", # Use regular assert instead of unittest-style
    "PT027", # Use pytest.raises instead of unittest assertRaises
]
"spatium/main.py" = [
    "D100", # Missing docstring in public module (FastAPI app)
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.ruff.mccabe]
max-complexity = 10

[tool.ruff.isort]
known-first-party = ["spatium"]
force-sort-within-sections = true

# Bandit security configuration
[tool.bandit]
exclude_dirs = ["tests", "venv", ".venv", "env", ".env"]
skips = ["B101", "B601"]  # Skip assert_used and shell_injection_subprocess
