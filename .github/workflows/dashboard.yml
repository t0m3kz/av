name: Dashboard Update

on:
  workflow_run:
    workflows: ["CI", "Release", "Nightly Build", "Code Quality Gate"]
    types:
      - completed
  schedule:
    # Update dashboard every hour
    - cron: '0 * * * *'
  workflow_dispatch:

permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  update-dashboard:
    name: Update Project Dashboard
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
      
      - name: Install dependencies
        run: |
          pip install requests python-dateutil
      
      - name: Generate dashboard data
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat > generate_dashboard.py << 'EOF'
          import requests
          import json
          import os
          from datetime import datetime, timedelta
          from dateutil import parser
          
          # GitHub API setup
          repo = os.environ.get('GITHUB_REPOSITORY')
          token = os.environ.get('GITHUB_TOKEN')
          headers = {'Authorization': f'token {token}', 'Accept': 'application/vnd.github.v3+json'}
          
          def get_workflow_runs(workflow_name, limit=10):
              url = f"https://api.github.com/repos/{repo}/actions/workflows"
              response = requests.get(url, headers=headers)
              workflows = response.json()['workflows']
              
              workflow = next((w for w in workflows if w['name'] == workflow_name), None)
              if not workflow:
                  return []
              
              url = f"https://api.github.com/repos/{repo}/actions/workflows/{workflow['id']}/runs"
              params = {'per_page': limit}
              response = requests.get(url, headers=headers, params=params)
              return response.json()['workflow_runs']
          
          def get_latest_release():
              url = f"https://api.github.com/repos/{repo}/releases/latest"
              try:
                  response = requests.get(url, headers=headers)
                  if response.status_code == 200:
                      return response.json()
              except:
                  pass
              return None
          
          def get_open_issues():
              url = f"https://api.github.com/repos/{repo}/issues"
              params = {'state': 'open', 'per_page': 100}
              response = requests.get(url, headers=headers, params=params)
              issues = response.json()
              
              bugs = [i for i in issues if 'bug' in [l['name'] for l in i.get('labels', [])]]
              enhancements = [i for i in issues if 'enhancement' in [l['name'] for l in i.get('labels', [])]]
              
              return {
                  'total': len(issues),
                  'bugs': len(bugs),
                  'enhancements': len(enhancements)
              }
          
          def calculate_success_rate(runs):
              if not runs:
                  return 0
              successful = len([r for r in runs if r['conclusion'] == 'success'])
              return round((successful / len(runs)) * 100, 1)
          
          # Collect data
          dashboard_data = {
              'updated_at': datetime.utcnow().isoformat() + 'Z',
              'workflows': {},
              'release': get_latest_release(),
              'issues': get_open_issues(),
              'metrics': {}
          }
          
          # Get workflow data
          workflows = ['CI', 'Release', 'Nightly Build', 'Code Quality Gate']
          for workflow in workflows:
              runs = get_workflow_runs(workflow, 20)
              dashboard_data['workflows'][workflow] = {
                  'latest_run': runs[0] if runs else None,
                  'success_rate': calculate_success_rate(runs[:10]),
                  'recent_runs': runs[:5]
              }
          
          # Calculate overall health score
          success_rates = [data['success_rate'] for data in dashboard_data['workflows'].values()]
          overall_health = round(sum(success_rates) / len(success_rates), 1) if success_rates else 0
          
          dashboard_data['metrics'] = {
              'overall_health': overall_health,
              'last_successful_build': None,
              'last_release_days_ago': None
          }
          
          # Find last successful CI run
          ci_runs = dashboard_data['workflows'].get('CI', {}).get('recent_runs', [])
          successful_ci = next((r for r in ci_runs if r['conclusion'] == 'success'), None)
          if successful_ci:
              dashboard_data['metrics']['last_successful_build'] = successful_ci['created_at']
          
          # Calculate days since last release
          if dashboard_data['release']:
              release_date = parser.parse(dashboard_data['release']['published_at'])
              days_ago = (datetime.now(release_date.tzinfo) - release_date).days
              dashboard_data['metrics']['last_release_days_ago'] = days_ago
          
          # Save data
          with open('dashboard-data.json', 'w') as f:
              json.dump(dashboard_data, f, indent=2)
          
          print("Dashboard data generated successfully")
          EOF
          
          python generate_dashboard.py
      
      - name: Generate dashboard HTML
        run: |
          cat > dashboard.html << 'EOF'
          <!DOCTYPE html>
          <html lang="en">
          <head>
              <meta charset="UTF-8">
              <meta name="viewport" content="width=device-width, initial-scale=1.0">
              <title>Spatium - Project Dashboard</title>
              <style>
                  * { margin: 0; padding: 0; box-sizing: border-box; }
                  body { font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif; background: #f6f8fa; color: #24292e; }
                  .container { max-width: 1200px; margin: 0 auto; padding: 20px; }
                  .header { text-align: center; margin-bottom: 40px; }
                  .header h1 { color: #0366d6; margin-bottom: 10px; }
                  .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(300px, 1fr)); gap: 20px; margin-bottom: 30px; }
                  .card { background: white; border-radius: 8px; padding: 20px; box-shadow: 0 1px 3px rgba(0,0,0,0.1); border: 1px solid #e1e4e8; }
                  .card h3 { margin-bottom: 15px; color: #0366d6; }
                  .status { display: inline-block; padding: 4px 8px; border-radius: 4px; color: white; font-size: 12px; font-weight: bold; }
                  .status.success { background: #28a745; }
                  .status.failure { background: #dc3545; }
                  .status.in_progress { background: #ffc107; color: #212529; }
                  .metric { display: flex; justify-content: space-between; align-items: center; padding: 10px 0; border-bottom: 1px solid #eee; }
                  .metric:last-child { border-bottom: none; }
                  .metric-value { font-weight: bold; color: #0366d6; }
                  .health-score { font-size: 2em; font-weight: bold; text-align: center; margin: 20px 0; }
                  .health-score.excellent { color: #28a745; }
                  .health-score.good { color: #ffc107; }
                  .health-score.poor { color: #dc3545; }
                  .footer { text-align: center; margin-top: 40px; color: #6a737d; font-size: 14px; }
                  .workflow-list { list-style: none; }
                  .workflow-list li { margin: 8px 0; display: flex; justify-content: space-between; align-items: center; }
                  .timestamp { color: #6a737d; font-size: 12px; }
              </style>
          </head>
          <body>
              <div class="container">
                  <div class="header">
                      <h1>🌟 Spatium Project Dashboard</h1>
                      <p>Network Automation Platform - Real-time Status</p>
                  </div>
                  
                  <div id="dashboard-content">
                      <!-- Content will be populated by JavaScript -->
                  </div>
                  
                  <div class="footer">
                      <p>Last updated: <span id="last-updated"></span></p>
                      <p>Auto-refreshes every hour | <a href="https://github.com/spatium-project/spatium">View on GitHub</a></p>
                  </div>
              </div>
              
              <script>
                  async function loadDashboard() {
                      try {
                          const response = await fetch('./dashboard-data.json');
                          const data = await response.json();
                          renderDashboard(data);
                      } catch (error) {
                          console.error('Failed to load dashboard data:', error);
                          document.getElementById('dashboard-content').innerHTML = '<p>Failed to load dashboard data</p>';
                      }
                  }
                  
                  function renderDashboard(data) {
                      const content = document.getElementById('dashboard-content');
                      const lastUpdated = document.getElementById('last-updated');
                      
                      lastUpdated.textContent = new Date(data.updated_at).toLocaleString();
                      
                      const healthClass = data.metrics.overall_health >= 90 ? 'excellent' : 
                                         data.metrics.overall_health >= 70 ? 'good' : 'poor';
                      
                      content.innerHTML = `
                          <div class="grid">
                              <div class="card">
                                  <h3>📊 Overall Health</h3>
                                  <div class="health-score ${healthClass}">${data.metrics.overall_health}%</div>
                                  <div class="metric">
                                      <span>Last Successful Build</span>
                                      <span class="metric-value">${data.metrics.last_successful_build ? 
                                          new Date(data.metrics.last_successful_build).toLocaleDateString() : 'Unknown'}</span>
                                  </div>
                                  <div class="metric">
                                      <span>Days Since Release</span>
                                      <span class="metric-value">${data.metrics.last_release_days_ago || 'N/A'}</span>
                                  </div>
                              </div>
                              
                              <div class="card">
                                  <h3>🔧 Workflows</h3>
                                  <ul class="workflow-list">
                                      ${Object.entries(data.workflows).map(([name, workflow]) => `
                                          <li>
                                              <span>${name}</span>
                                              <span>
                                                  <span class="status ${workflow.latest_run?.conclusion || 'unknown'}">
                                                      ${workflow.latest_run?.conclusion || 'Unknown'}
                                                  </span>
                                                  <span style="margin-left: 10px;">${workflow.success_rate}%</span>
                                              </span>
                                          </li>
                                      `).join('')}
                                  </ul>
                              </div>
                              
                              <div class="card">
                                  <h3>🐛 Issues</h3>
                                  <div class="metric">
                                      <span>Total Open</span>
                                      <span class="metric-value">${data.issues.total}</span>
                                  </div>
                                  <div class="metric">
                                      <span>Bugs</span>
                                      <span class="metric-value">${data.issues.bugs}</span>
                                  </div>
                                  <div class="metric">
                                      <span>Enhancements</span>
                                      <span class="metric-value">${data.issues.enhancements}</span>
                                  </div>
                              </div>
                              
                              <div class="card">
                                  <h3>🚀 Latest Release</h3>
                                  ${data.release ? `
                                      <div class="metric">
                                          <span>Version</span>
                                          <span class="metric-value">${data.release.tag_name}</span>
                                      </div>
                                      <div class="metric">
                                          <span>Published</span>
                                          <span class="metric-value">${new Date(data.release.published_at).toLocaleDateString()}</span>
                                      </div>
                                      <div class="metric">
                                          <span>Downloads</span>
                                          <span class="metric-value">${data.release.assets.reduce((sum, asset) => sum + asset.download_count, 0)}</span>
                                      </div>
                                  ` : '<p>No releases found</p>'}
                              </div>
                          </div>
                      `;
                  }
                  
                  // Load dashboard on page load
                  loadDashboard();
                  
                  // Auto-refresh every 5 minutes
                  setInterval(loadDashboard, 300000);
              </script>
          </body>
          </html>
          EOF
      
      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: .
          destination_dir: dashboard
          keep_files: false
          publish_branch: gh-pages
          user_name: 'github-actions[bot]'
          user_email: 'github-actions[bot]@users.noreply.github.com'
          commit_message: 'Update project dashboard'
