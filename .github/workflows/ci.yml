name: CI

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:
  schedule:
    # Run nightly builds to catch dependency issues
    - cron: '0 2 * * *'

env:
  PYTHON_DEFAULT_VERSION: "3.10"

jobs:
  lint-and-format:
    name: Lint & Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'
      
      - name: Install tools
        run: |
          pip install uv
          uv venv
          uv sync 
      
      - name: Lint & Format
        run: |
          echo "::group::Code formatting check"
          uv run ruff format --check .
          echo "::endgroup::"
          
          echo "::group::Code linting"
          uv run ruff check . --output-format=github
          echo "::endgroup::"
          
          echo "::group::YAML linting"
          uv run yamllint -d "{extends: default, ignore: [.github/]}" \
                -d "{rules: {truthy: {allowed-values: ['true', 'false', 'yes', 'no', 'on', 'off']}}}" .
          echo "::endgroup::"
      
      - name: Type checking
        run: |
          echo "::group::Type checking with mypy"
          uv add --dev mypy types-PyYAML
          uv run mypy spatium/ --ignore-missing-imports --show-error-codes
          echo "::endgroup::"

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync
      
      - name: Security checks
        run: |
          echo "::group::Dependency vulnerability scan"
          uv add --dev safety
          uv run safety check || true
          echo "::endgroup::"
          
          echo "::group::Code security scan"
          uv add --dev bandit
          uv run bandit -r spatium/ -f txt || true
          echo "::endgroup::"

  test:
    name: Test (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan]
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync 
      
      - name: Install test dependencies
        run: |
          uv add --dev pytest-cov pytest-xdist pytest-timeout
      
      - name: Run tests with coverage
        run: |
          echo "::group::Running test suite"
          uv run pytest tests \
            --verbose \
            --tb=short \
            --cov=spatium \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --cov-fail-under=80 \
            --timeout=60 \
            --maxfail=5 \
            -n auto
          echo "::endgroup::"
      
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: matrix.python-version == env.PYTHON_DEFAULT_VERSION
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
      
      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        if: matrix.python-version == env.PYTHON_DEFAULT_VERSION
        with:
          name: coverage-report
          path: |
            coverage.xml
            htmlcov/
          retention-days: 30
      
      - name: Comment coverage on PR
        if: github.event_name == 'pull_request' && matrix.python-version == env.PYTHON_DEFAULT_VERSION
        uses: orgoro/coverage@v3
        with:
          coverageFile: coverage.xml
          token: ${{ secrets.GITHUB_TOKEN }}

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: test
    services:
      # Add containerlab service if available
      docker:
        image: docker:dind
        options: --privileged
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync
      
      - name: Setup Docker
        run: |
          docker --version
          docker info
      
      - name: Run integration tests
        run: |
          echo "::group::Integration tests"
          uv run pytest tests/integration/ -v --tb=short
          echo "::endgroup::"
      
      - name: Test Docker functionality
        run: |
          echo "::group::Testing Docker integration"
          # Test that the application can handle containerlab operations
          uv run python -c "
          from spatium.services.deployment import ContainerLabDeploymentService
          service = ContainerLabDeploymentService()
          print('ContainerLab service initialized successfully')
          "
          echo "::endgroup::"

  docs:
    name: Build Docs
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync
      
      - name: Build docs
        run: |
          echo "::group::Building documentation"
          uv run mkdocs build --strict
          echo "::endgroup::"
      
      - name: Test docs
        run: |
          echo "::group::Testing documentation"
          # Check that all internal links work
          find site/ -name "*.html" -exec grep -l "404" {} \; | wc -l | grep -q "^0$" || exit 1
          echo "Documentation build successful"
          echo "::endgroup::"
      
      - name: Upload docs
        uses: actions/upload-artifact@v4
        with:
          name: documentation
          path: site/
          retention-days: 30

  build-test:
    name: Build Package Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'
      
      - name: Install build dependencies
        run: |
          pip install uv build twine
          uv venv
          uv sync
      
      - name: Build package
        run: |
          echo "::group::Building Python package"
          python -m build
          echo "::endgroup::"
      
      - name: Check package
        run: |
          echo "::group::Checking package integrity"
          twine check dist/*
          echo "::endgroup::"
      
      - name: Test package installation
        run: |
          echo "::group::Testing package installation"
          pip install dist/*.whl
          python -c "import spatium; print('Package installed successfully')"
          echo "::endgroup::"

  docker-test:
    name: Docker Build Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: spatium:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          echo "::group::Testing Docker image"
          docker run --rm spatium:test --help
          echo "Docker image test successful"
          echo "::endgroup::"

  performance-test:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_DEFAULT_VERSION }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync
          uv add --dev pytest-benchmark
      
      - name: Run performance tests
        run: |
          echo "::group::Running performance benchmarks"
          # Add performance tests when they exist
          echo "Performance tests would run here"
          echo "::endgroup::"

  compatibility-test:
    name: OS Compatibility
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.10", "3.12"]
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync
      
      - name: Run basic tests
        run: |
          # Run a subset of tests for compatibility check
          uv run pytest tests/unit/ -k "not containerlab" --tb=short

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, test, integration-test, docs, build-test, docker-test]
    if: always()
    steps:
      - name: Check all jobs
        run: |
          echo "Checking quality gate..."
          
          # Check if all required jobs passed
          if [[ "${{ needs.lint-and-format.result }}" != "success" ]]; then
            echo "❌ Lint and format check failed"
            exit 1
          fi
          
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.integration-test.result }}" != "success" ]]; then
            echo "❌ Integration tests failed"
            exit 1
          fi
          
          if [[ "${{ needs.docs.result }}" != "success" ]]; then
            echo "❌ Documentation build failed"
            exit 1
          fi
          
          if [[ "${{ needs.build-test.result }}" != "success" ]]; then
            echo "❌ Package build test failed"
            exit 1
          fi
          
          echo "✅ All quality checks passed!"
