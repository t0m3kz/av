name: Code Quality Gate

on:
  pull_request:
    types: [opened, synchronize, reopened]
  push:
    branches: [main, master, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write
  statuses: write

jobs:
  quality-checks:
    name: Quality Gate Checks
    runs-on: ubuntu-latest
    outputs:
      coverage-percentage: ${{ steps.coverage.outputs.percentage }}
      security-issues: ${{ steps.security.outputs.issues }}
      complexity-score: ${{ steps.complexity.outputs.score }}
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'
      
      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync
      
      - name: Code complexity analysis
        id: complexity
        run: |
          echo "::group::Analyzing code complexity"
          uv add --dev radon xenon
          
          # Calculate cyclomatic complexity
          COMPLEXITY=$(uv run radon cc spatium/ -a -nc | tail -1 | grep -o '[0-9.]*' | head -1)
          echo "Average complexity: $COMPLEXITY"
          echo "score=$COMPLEXITY" >> $GITHUB_OUTPUT
          
          # Check for complex functions
          uv run xenon --max-absolute C --max-modules A --max-average A spatium/ || true
          echo "::endgroup::"
      
      - name: Test coverage analysis
        id: coverage
        run: |
          echo "::group::Running tests with coverage"
          uv run pytest tests/ --cov=spatium --cov-report=xml --cov-report=term-missing
          
          # Extract coverage percentage
          COVERAGE=$(grep -o 'total.*%' coverage.xml | grep -o '[0-9]*%' | head -1 | tr -d '%')
          echo "Coverage: $COVERAGE%"
          echo "percentage=$COVERAGE" >> $GITHUB_OUTPUT
          echo "::endgroup::"
      
      - name: Security analysis
        id: security
        run: |
          echo "::group::Security analysis"
          uv add --dev bandit safety
          
          # Run bandit for security issues
          BANDIT_ISSUES=$(uv run bandit -r spatium/ -f json | jq '.results | length' || echo "0")
          echo "Security issues found: $BANDIT_ISSUES"
          echo "issues=$BANDIT_ISSUES" >> $GITHUB_OUTPUT
          
          # Check dependencies
          uv run safety check || true
          echo "::endgroup::"
      
      - name: Code quality metrics
        run: |
          echo "::group::Code quality metrics"
          uv add --dev flake8
          
          # Count total lines of code
          TOTAL_LINES=$(find spatium/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')
          echo "Total lines of code: $TOTAL_LINES"
          
          # Count test lines
          TEST_LINES=$(find tests/ -name "*.py" -exec wc -l {} + | tail -1 | awk '{print $1}')
          echo "Test lines of code: $TEST_LINES"
          
          # Test to code ratio
          if [ $TOTAL_LINES -gt 0 ]; then
            RATIO=$(echo "scale=2; $TEST_LINES / $TOTAL_LINES" | bc)
            echo "Test to code ratio: $RATIO"
          fi
          echo "::endgroup::"

  quality-gate:
    name: Quality Gate Decision
    runs-on: ubuntu-latest
    needs: quality-checks
    steps:
      - name: Evaluate quality gate
        run: |
          echo "::group::Quality Gate Evaluation"
          
          COVERAGE=${{ needs.quality-checks.outputs.coverage-percentage }}
          SECURITY_ISSUES=${{ needs.quality-checks.outputs.security-issues }}
          COMPLEXITY=${{ needs.quality-checks.outputs.complexity-score }}
          
          echo "üìä Quality Metrics:"
          echo "  Coverage: ${COVERAGE}%"
          echo "  Security Issues: $SECURITY_ISSUES"
          echo "  Complexity Score: $COMPLEXITY"
          
          # Quality gate rules
          PASS=true
          
          # Check coverage threshold
          if [ "$COVERAGE" -lt 80 ]; then
            echo "‚ùå Coverage below threshold (80%): ${COVERAGE}%"
            PASS=false
          else
            echo "‚úÖ Coverage meets threshold: ${COVERAGE}%"
          fi
          
          # Check security issues
          if [ "$SECURITY_ISSUES" -gt 0 ]; then
            echo "‚ùå Security issues found: $SECURITY_ISSUES"
            PASS=false
          else
            echo "‚úÖ No security issues found"
          fi
          
          # Check complexity
          if [ "$(echo "$COMPLEXITY > 10" | bc)" = "1" ]; then
            echo "‚ùå Code complexity too high: $COMPLEXITY"
            PASS=false
          else
            echo "‚úÖ Code complexity acceptable: $COMPLEXITY"
          fi
          
          if [ "$PASS" = "true" ]; then
            echo "üéâ Quality gate PASSED!"
            exit 0
          else
            echo "üö´ Quality gate FAILED!"
            exit 1
          fi
          echo "::endgroup::"
      
      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const coverage = '${{ needs.quality-checks.outputs.coverage-percentage }}';
            const securityIssues = '${{ needs.quality-checks.outputs.security-issues }}';
            const complexity = '${{ needs.quality-checks.outputs.complexity-score }}';
            
            const body = `## üìä Quality Gate Report
            
            | Metric | Value | Status |
            |--------|-------|--------|
            | Coverage | ${coverage}% | ${coverage >= 80 ? '‚úÖ' : '‚ùå'} |
            | Security Issues | ${securityIssues} | ${securityIssues == 0 ? '‚úÖ' : '‚ùå'} |
            | Complexity | ${complexity} | ${complexity <= 10 ? '‚úÖ' : '‚ùå'} |
            
            ### Quality Standards
            - **Coverage**: Minimum 80% required
            - **Security**: Zero issues allowed
            - **Complexity**: Maximum 10.0 average
            
            ${coverage >= 80 && securityIssues == 0 && complexity <= 10 ? 
              'üéâ **Quality gate PASSED!** All metrics meet the required standards.' : 
              'üö´ **Quality gate FAILED!** Please address the issues above before merging.'}
            `;
            
            // Find existing quality gate comment
            const comments = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const existingComment = comments.data.find(comment => 
              comment.body.includes('üìä Quality Gate Report')
            );
            
            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: body
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
