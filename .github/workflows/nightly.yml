name: Nightly Build

on:
  schedule:
    # Run at 2 AM UTC every day
    - cron: '0 2 * * *'
  workflow_dispatch:

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  nightly-test:
    name: Nightly Test Suite
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.10", "3.11", "3.12"]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync

      - name: Run comprehensive tests
        run: |
          echo "::group::Running full test suite"
          uv run pytest tests/ \
            --verbose \
            --tb=long \
            --cov=spatium \
            --cov-report=xml \
            --cov-report=html \
            --timeout=120 \
            --maxfail=10
          echo "::endgroup::"

      - name: Run long-running tests
        run: |
          echo "::group::Running slow tests"
          uv run pytest tests/ -m "slow" --verbose --tb=short || true
          echo "::endgroup::"

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        if: matrix.python-version == '3.10'
        with:
          name: nightly-coverage-${{ github.run_number }}
          path: |
            coverage.xml
            htmlcov/
          retention-days: 7

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync

      - name: Run security audit
        run: |
          echo "::group::Security vulnerability scan"
          uv add --dev safety bandit semgrep

          # Safety check for known vulnerabilities
          uv run safety check --json > safety-report.json || true

          # Bandit for security issues in code
          uv run bandit -r spatium/ -f json -o bandit-report.json || true

          # Semgrep for additional security patterns
          # uv run semgrep --config=auto spatium/ --json -o semgrep-report.json || true
          echo "::endgroup::"

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-${{ github.run_number }}
          path: |
            safety-report.json
            bandit-report.json
          retention-days: 30

      - name: Check for critical vulnerabilities
        run: |
          # Check if any critical vulnerabilities were found
          if [ -f safety-report.json ]; then
            CRITICAL_COUNT=$(jq '[.[] | select(.vulnerability.severity == "high" or .vulnerability.severity == "critical")] | length' safety-report.json || echo "0")
            if [ "$CRITICAL_COUNT" -gt 0 ]; then
              echo "❌ Found $CRITICAL_COUNT critical/high severity vulnerabilities"
              exit 1
            fi
          fi

  dependency-check:
    name: Dependency Health Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync

      - name: Check for outdated dependencies
        run: |
          echo "::group::Checking for outdated packages"
          uv pip list --outdated > outdated-packages.txt || true
          cat outdated-packages.txt
          echo "::endgroup::"

      - name: Dependency tree analysis
        run: |
          echo "::group::Analyzing dependency tree"
          uv add --dev pipdeptree
          uv run pipdeptree --json > dependency-tree.json
          uv run pipdeptree --packages spatium > dependency-tree.txt
          echo "::endgroup::"

      - name: Upload dependency reports
        uses: actions/upload-artifact@v4
        with:
          name: dependency-check-${{ github.run_number }}
          path: |
            outdated-packages.txt
            dependency-tree.json
            dependency-tree.txt
          retention-days: 7

  performance-baseline:
    name: Performance Baseline
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync
          uv add --dev pytest-benchmark

      - name: Run performance benchmarks
        run: |
          echo "::group::Running performance benchmarks"
          # Create simple performance tests if they don't exist
          mkdir -p tests/performance
          cat > tests/performance/test_benchmarks.py << 'EOF'
          import pytest
          from spatium.clients.ssh_client import SSHClient
          from spatium.clients.rest_client import RestClient

          def test_ssh_client_creation_speed(benchmark):
              """Benchmark SSH client creation."""
              def create_client():
                  return SSHClient(host="test", username="test", password="test")
              benchmark(create_client)

          def test_rest_client_creation_speed(benchmark):
              """Benchmark REST client creation."""
              def create_client():
                  return RestClient(host="test", username="test", password="test")
              benchmark(create_client)
          EOF

          uv run pytest tests/performance/ --benchmark-only --benchmark-json=benchmark-results.json
          echo "::endgroup::"

      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results-${{ github.run_number }}
          path: benchmark-results.json
          retention-days: 30

  docs-link-check:
    name: Documentation Link Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.10"
          cache: 'pip'

      - name: Install dependencies
        run: |
          pip install uv
          uv venv
          uv sync

      - name: Build documentation
        run: |
          uv run mkdocs build

      - name: Check for broken links
        run: |
          echo "::group::Checking documentation links"
          # Install link checker
          npm install -g markdown-link-check

          # Check all markdown files
          find docs/ -name "*.md" -exec markdown-link-check {} \; || true
          echo "::endgroup::"

  create-issue-on-failure:
    name: Create Issue on Failure
    runs-on: ubuntu-latest
    needs: [nightly-test, security-audit, dependency-check, performance-baseline, docs-link-check]
    if: failure()
    steps:
      - uses: actions/checkout@v4

      - name: Create issue on failure
        uses: actions/github-script@v7
        with:
          script: |
            const title = `Nightly Build Failed - ${new Date().toISOString().split('T')[0]}`;
            const body = `
            # Nightly Build Failure Report

            **Date**: ${new Date().toISOString()}
            **Workflow**: Nightly Build
            **Run ID**: ${{ github.run_id }}

            ## Failed Jobs

            ${{ needs.nightly-test.result == 'failure' ? '❌ Nightly Test Suite' : '✅ Nightly Test Suite' }}
            ${{ needs.security-audit.result == 'failure' ? '❌ Security Audit' : '✅ Security Audit' }}
            ${{ needs.dependency-check.result == 'failure' ? '❌ Dependency Check' : '✅ Dependency Check' }}
            ${{ needs.performance-baseline.result == 'failure' ? '❌ Performance Baseline' : '✅ Performance Baseline' }}
            ${{ needs.docs-link-check.result == 'failure' ? '❌ Documentation Link Check' : '✅ Documentation Link Check' }}

            ## Action Required

            Please investigate the failures and take appropriate action:

            1. Review the workflow logs: [Run ${{ github.run_id }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            2. Check for any critical security vulnerabilities
            3. Verify dependency compatibility
            4. Fix any broken documentation links
            5. Address performance regressions

            ## Auto-generated
            This issue was automatically created by the nightly build workflow.
            `;

            // Check if an issue already exists for today
            const today = new Date().toISOString().split('T')[0];
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: 'nightly-build,automated',
              state: 'open'
            });

            const todayIssue = existingIssues.data.find(issue =>
              issue.title.includes(today)
            );

            if (!todayIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: title,
                body: body,
                labels: ['nightly-build', 'automated', 'bug']
              });
            }

  report-success:
    name: Report Success
    runs-on: ubuntu-latest
    needs: [nightly-test, security-audit, dependency-check, performance-baseline, docs-link-check]
    if: success()
    steps:
      - name: Report success
        run: |
          echo "✅ Nightly build completed successfully!"
          echo "📊 All checks passed:"
          echo "  - Test suite: ✅"
          echo "  - Security audit: ✅"
          echo "  - Dependency check: ✅"
          echo "  - Performance baseline: ✅"
          echo "  - Documentation links: ✅"
